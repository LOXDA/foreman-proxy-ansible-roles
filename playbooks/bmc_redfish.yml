---

- hosts: "{{ target_host | default('localhost') }}"
  connection: local
  gather_facts: false

  vars:
    username: "{{ vault_bmc_username | default('root') }}"
    password: "{{ vault_bmc_password | default('p4p1llon') }}"
    baseuri: "{{ hostvars[inventory_hostname].ansible_host }}"
  tasks:

#    - name: Get Manager attributes with a default of 45 seconds
#      community.general.idrac_community.general.redfish_info:
#        category: Manager
#        command: GetManagerAttributes
#        baseuri: "{{ baseuri }}"
#        username: "{{ username }}"
#        password: "{{ password }}"
#        timeout: 45
#      register: result

#    # Examples to display the value of all or a single iDRAC attribute
#    - name: Store iDRAC attributes as a fact variable
#      ansible.builtin.set_fact:
#        idrac_attributes: "{{ result.redfish_facts.entries | selectattr('Id', 'defined') | selectattr('Id', 'equalto', 'iDRACAttributes') | list | first }}"
#
#    - name: Display all iDRAC attributes
#      ansible.builtin.debug:
#        var: idrac_attributes
#
#    - name: Display the value of 'Syslog.1.SysLogEnable' iDRAC attribute
#      ansible.builtin.debug:
#        var: idrac_attributes['Syslog.1.SysLogEnable']
#
#    # Examples to display the value of all or a single LifecycleController attribute
#    - name: Store LifecycleController attributes as a fact variable
#      ansible.builtin.set_fact:
#        lc_attributes: "{{ result.redfish_facts.entries | selectattr('Id', 'defined') | selectattr('Id', 'equalto', 'LCAttributes') | list | first }}"
#
#    - name: Display LifecycleController attributes
#      ansible.builtin.debug:
#        var: lc_attributes
#
#    - name: Display the value of 'CollectSystemInventoryOnRestart' attribute
#      ansible.builtin.debug:
#        var: lc_attributes['LCAttributes.1.CollectSystemInventoryOnRestart']
#
#    # Examples to display the value of all or a single System attribute
#    - name: Store System attributes as a fact variable
#      ansible.builtin.set_fact:
#        system_attributes: "{{ result.redfish_facts.entries | selectattr('Id', 'defined') | selectattr('Id', 'equalto', 'SystemAttributes') | list | first }}"
#
#    - name: Display System attributes
#      ansible.builtin.debug:
#        var: system_attributes
#
#    - name: Display the value of 'PSRedPolicy'
#      ansible.builtin.debug:
#        var: system_attributes['ServerPwr.1.PSRedPolicy']

#    - name: Get CPU inventory
#      community.general.redfish_info:
#        category: Systems
#        command: GetCpuInventory
#        baseuri: "{{ baseuri }}"
#        username: "{{ username }}"
#        password: "{{ password }}"
#      register: result
#    - debug:
#        msg: "{{ result.redfish_facts.cpu.entries | to_nice_json }}"

    # - name: Get CPU model
    #   community.general.redfish_info:
    #     category: Systems
    #     command: GetCpuInventory
    #     baseuri: "{{ baseuri }}"
    #     username: "{{ username }}"
    #     password: "{{ password }}"
    #   register: result
    # - debug:
    #     msg: "{{ result.redfish_facts.cpu.entries.0.Model }}"

#    - name: Get memory inventory
#      community.general.redfish_info:
#        category: Systems
#        command: GetMemoryInventory
#        baseuri: "{{ baseuri }}"
#        username: "{{ username }}"
#        password: "{{ password }}"
#      register: result
#    - debug:
#        msg: "{{ result.redfish_facts | to_nice_json }}"

#    - name: Get fan inventory with a timeout of 20 seconds
#      community.general.redfish_info:
#        category: Chassis
#        command: GetFanInventory
#        baseuri: "{{ baseuri }}"
#        username: "{{ username }}"
#        password: "{{ password }}"
#        timeout: 20
#      register: result
#    - debug:
#        msg: "{{ result.redfish_facts | to_nice_json }}"

#    - name: Get Virtual Media information
#      community.general.redfish_info:
#        category: Manager
#        command: GetVirtualMedia
#        baseuri: "{{ baseuri }}"
#        username: "{{ username }}"
#        password: "{{ password }}"
#      register: result
#    - debug:
#        msg: "{{ result.redfish_facts.virtual_media.entries | to_nice_json }}"

# ok: [bmc-adn3] =>
#   msg: |-
#     [
#         [
#             {
#                 "resource_uri": "/redfish/v1/Managers/iDRAC.Embedded.1"
#             },
#             [
#                 {
#                     "ConnectedVia": "NotConnected",
#                     "Description": "iDRAC Virtual Media Services Settings",
#                     "Id": "RemovableDisk",
#                     "Image": null,
#                     "ImageName": null,
#                     "MediaTypes": [
#                         "USBStick"
#                     ],
#                     "Name": "Virtual Removable Disk",
#                     "WriteProtected": null
#                 },
#                 {
#                     "ConnectedVia": "NotConnected",
#                     "Description": "iDRAC Virtual Media Services Settings",
#                     "Id": "CD",
#                     "Image": null,
#                     "ImageName": null,
#                     "MediaTypes": [
#                         "CD",
#                         "DVD"
#                     ],
#                     "Name": "Virtual CD",
#                     "WriteProtected": null
#                 }
#             ]
#         ]
#     ]

#    - name: Get Volume Inventory
#      community.general.redfish_info:
#        category: Systems
#        command: GetVolumeInventory
#        baseuri: "{{ baseuri }}"
#        username: "{{ username }}"
#        password: "{{ password }}"
#      register: result
#    - debug:
#        msg: "{{ result.redfish_facts.volume.entries | to_nice_json }}"

# ok: [bmc-adn3] =>
#   msg: |-
#     [
#         [
#             {
#                 "system_uri": "/redfish/v1/Systems/System.Embedded.1"
#             },
#             [
#                 {
#                     "Controller": "PERC H330 Mini",
#                     "Volumes": [
#                         {
#                             "BlockSizeBytes": 512,
#                             "CapacityBytes": 1999844147200,
#                             "EncryptionTypes": [],
#                             "Id": "Disk.Bay.0:Enclosure.Internal.0-1:RAID.Integrated.1-1",
#                             "Identifiers": [],
#                             "Linked_drives": [
#                                 {
#                                     "Id": "Disk.Bay.0:Enclosure.Internal.0-1:RAID.Integrated.1-1"
#                                 }
#                             ],
#                             "Name": "Physical Disk 0:1:0",
#                             "Operations": [],
#                             "Status": {
#                                 "Health": "OK",
#                                 "HealthRollup": "OK",
#                                 "State": "Enabled"
#                             },
#                             "VolumeType": "RawDevice"
#                         },
#                         {
#                             "BlockSizeBytes": 512,
#                             "CapacityBytes": 1999844147200,
#                             "EncryptionTypes": [],
#                             "Id": "Disk.Bay.1:Enclosure.Internal.0-1:RAID.Integrated.1-1",
#                             "Identifiers": [],
#                             "Linked_drives": [
#                                 {
#                                     "Id": "Disk.Bay.1:Enclosure.Internal.0-1:RAID.Integrated.1-1"
#                                 }
#                             ],
#                             "Name": "Physical Disk 0:1:1",
#                             "Operations": [],
#                             "Status": {
#                                 "Health": "OK",
#                                 "HealthRollup": "OK",
#                                 "State": "Enabled"
#                             },
#                             "VolumeType": "RawDevice"
#                         },
#                         {
#                             "BlockSizeBytes": 512,
#                             "CapacityBytes": 127372623872,
#                             "EncryptionTypes": [],
#                             "Id": "Disk.Bay.3:Enclosure.Internal.0-1:RAID.Integrated.1-1",
#                             "Identifiers": [],
#                             "Linked_drives": [
#                                 {
#                                     "Id": "Disk.Bay.3:Enclosure.Internal.0-1:RAID.Integrated.1-1"
#                                 }
#                             ],
#                             "Name": "Solid State Disk 0:1:3",
#                             "Operations": [],
#                             "Status": {
#                                 "Health": "OK",
#                                 "HealthRollup": "OK",
#                                 "State": "Enabled"
#                             },
#                             "VolumeType": "RawDevice"
#                         }
#                     ]
#                 },
#                 {
#                     "Controller": "C610/X99 series chipset sSATA Controller [AHCI mode]",
#                     "Volumes": []
#                 },
#                 {
#                     "Controller": "C610/X99 series chipset 6-Port SATA Controller [AHCI mode]",
#                     "Volumes": []
#                 }
#             ]
#         ]
#     ]


#    - name: Get Session information
#      community.general.redfish_info:
#        category: Sessions
#        command: GetSessions
#        baseuri: "{{ baseuri }}"
#        username: "{{ username }}"
#        password: "{{ password }}"
#      register: result
#    - debug:
#        msg: "{{ result.redfish_facts.session.entries | to_nice_json }}"

#    - name: Get default inventory information
#      community.general.redfish_info:
#        baseuri: "{{ baseuri }}"
#        username: "{{ username }}"
#        password: "{{ password }}"
#      register: result
#    - debug:
#        msg: "{{ result.redfish_facts | to_nice_json }}"

# ok: [bmc-adn3] =>
#   msg: |-
#     {
#         "system": {
#             "entries": [
#                 [
#                     {
#                         "system_uri": "/redfish/v1/Systems/System.Embedded.1"
#                     },
#                     {
#                         "AssetTag": "MINEFI FRANCETHD1 1HTQWG2",
#                         "BiosVersion": "2.2.5",
#                         "HostName": "adn3",
#                         "Id": "System.Embedded.1",
#                         "Manufacturer": "Dell Inc.",
#                         "MemorySummary": {
#                             "Status": {
#                                 "Health": "OK",
#                                 "HealthRollup": "OK",
#                                 "State": "Enabled"
#                             },
#                             "TotalSystemMemoryGiB": 119.209344
#                         },
#                         "Model": "PowerEdge R430",
#                         "Name": "System",
#                         "PartNumber": "0CN7X8A01",
#                         "PowerState": "On",
#                         "ProcessorSummary": {
#                             "Count": 2,
#                             "LogicalProcessorCount": 32,
#                             "Model": "Intel(R) Xeon(R) CPU E5-2630 v3 @ 2.40GHz",
#                             "Status": {
#                                 "Health": "OK",
#                                 "HealthRollup": "OK",
#                                 "State": "Enabled"
#                             }
#                         },
#                         "SKU": "1HTQWG2",
#                         "SerialNumber": "CN779216AB00QD",
#                         "Status": {
#                             "Health": "OK",
#                             "HealthRollup": "OK",
#                             "State": "Enabled"
#                         },
#                         "SystemType": "Physical"
#                     }
#                 ]
#             ],
#             "ret": true
#         }
#     }


#    - name: Get several inventories
#      community.general.redfish_info:
#        category: Systems
#        command: GetNicInventory,GetBiosAttributes
#        baseuri: "{{ baseuri }}"
#        username: "{{ username }}"
#        password: "{{ password }}"
#      register: result
#    - debug:
#        msg: "{{ result.redfish_facts | to_nice_json }}"

#    - name: Get default system inventory and user information
#      community.general.redfish_info:
#        category: Systems,Accounts
#        baseuri: "{{ baseuri }}"
#        username: "{{ username }}"
#        password: "{{ password }}"
#      register: result
#    - debug:
#        msg: "{{ result.redfish_facts | to_nice_json }}"

#    - name: Get default system, user and firmware information
#      community.general.redfish_info:
#        category: ["Systems", "Accounts", "Update"]
#        baseuri: "{{ baseuri }}"
#        username: "{{ username }}"
#        password: "{{ password }}"
#      register: result
#    - debug:
#        msg: "{{ result.redfish_facts | to_nice_json }}"

    - name: Get Manager NIC inventory information
      community.general.redfish_info:
        category: Manager
        command: GetManagerNicInventory
        baseuri: "{{ baseuri }}"
        username: "{{ username }}"
        password: "{{ password }}"
      register: result
    - debug:
        msg: "{{ result.redfish_facts | to_nice_json }}"

#    - name: Get boot override information
#      community.general.redfish_info:
#        category: Systems
#        command: GetBootOverride
#        baseuri: "{{ baseuri }}"
#        username: "{{ username }}"
#        password: "{{ password }}"
#      register: result
#    - debug:
#        msg: "{{ result.redfish_facts | to_nice_json }}"
#
#    - name: Get chassis inventory
#      community.general.redfish_info:
#        category: Chassis
#        command: GetChassisInventory
#        baseuri: "{{ baseuri }}"
#        username: "{{ username }}"
#        password: "{{ password }}"
#      register: result
#    - debug:
#        msg: "{{ result.redfish_facts | to_nice_json }}"
#
#    - name: Get all information available in the Manager category
#      community.general.redfish_info:
#        category: Manager
#        command: all
#        baseuri: "{{ baseuri }}"
#        username: "{{ username }}"
#        password: "{{ password }}"
#      register: result
#    - debug:
#        msg: "{{ result.redfish_facts | to_nice_json }}"
#
#    - name: Get firmware update capability information
#      community.general.redfish_info:
#        category: Update
#        command: GetFirmwareUpdateCapabilities
#        baseuri: "{{ baseuri }}"
#        username: "{{ username }}"
#        password: "{{ password }}"
#      register: result
#    - debug:
#        msg: "{{ result.redfish_facts | to_nice_json }}"
#
#    - name: Get all information available in all categories
#      community.general.redfish_info:
#        category: all
#        command: all
#        baseuri: "{{ baseuri }}"
#        username: "{{ username }}"
#        password: "{{ password }}"
#      register: result
#    - debug:
#        msg: "{{ result.redfish_facts | to_nice_json }}"
